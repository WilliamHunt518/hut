plugins {
    id 'java-library'
    id 'eclipse'
}
archivesBaseName = 'someJar'
version = '1.0-SNAPSHOT'
sourceSets.main.java.srcDirs = ['src']

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.test.Run'
    }
}

dependencies {
   implementation  'log4j:log4j:1.2.16'
   implementation 'com.google.code.gson:gson:2.2.2'
   implementation 'com.rabbitmq:amqp-client:5.16.0'
   implementation 'org.mongodb:mongodb-driver:3.7.0'
   implementation 'uk.com.robust-it:cloning:1.9.10'
   implementation 'org.objenesis:objenesis:2.6'
   }

//Task to generate .jar file of the project
task genJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'server.Simulator'
    }
    baseName = project.name + '-all'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//Task to copy generated .jar file from build/libs to root dir so it can access server.json
task copyFromLibs (dependsOn: genJar, type: Copy) {
    from "build/libs"
    into "."
    include "*.jar"
}

//Task to execute the .jar file and get the server running
task runServer (dependsOn: copyFromLibs, type: JavaExec) {
    classpath = files('server-all-1.0-SNAPSHOT.jar')
   classpath += sourceSets.main.runtimeClasspath
   main = "server.Simulator"
}